version: '3'
services:

  # Go Server
  server-go:
    build:
      context: ./server/backend_go
      dockerfile: Dockerfile
    container_name: server-go
    ports:
      - 12345:12345
    working_dir: /workspace
    tty: true # コンテナの起動永続化
    volumes:
      - ./server/backend_go:/workspace
      - ./server/uploadfiles:/mnt/uploadfiles
    depends_on:
      - 'db-mysql'
    networks:
      - app_net

  # grobid server
  server-grobid:
    build:
      context: ./server/backend_grobid
      dockerfile: Dockerfile
    container_name: backend-grobid
    ports:
      - 8070:8070
    working_dir: /opt/grobid
    tty: true # コンテナの起動永続化
    volumes:
      - ./server/backend_grobid:/workspace
    runtime: nvidia
    depends_on:
      - 'db-mysql'
    networks:
      - app_net

  # backend python
  backend-python:
    build:
      context: ./server/backend_python
      dockerfile: Dockerfile
    container_name: backend-python
    ports:
      - 12340:12340
    working_dir: /workspace
    tty: true # コンテナの起動永続化
    volumes:
      - ./server/backend_python:/workspace
      - ./server/uploadfiles:/mnt/uploadfiles
    # command: sh -c "cd /root/ && rm -rf /root/grobid_client* && git clone https://github.com/akitomonam/grobid_client_python.git && cd /root/grobid_client_python && python setup.py install"
    # とりあえずコンテナが停止しないように「tail -f /dev/null」
    entrypoint:
      [
        "sh",
        "-c",
        "cd /workspace && rm -rf /workspace/grobid_client* && git clone https://github.com/akitomonam/grobid_client_python.git && cd /workspace/grobid_client_python && python setup.py install && cd /workspace/API_Handler && python grobid_handler.py"
      ]
    runtime: nvidia
    networks:
      - app_net
    depends_on:
      - 'db-mysql'
      # stdin_open: true

      # client
  client-vue:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client-vue
    ports:
      - 8080:8080
    tty: true # コンテナの起動永続化
    volumes:
      - ./client:/workspace
    command: sh -c "cd /workspace/Vue3 && npm install && npm run build && npm run serve"
    depends_on:
      - 'db-mysql'
    networks:
      - app_net

  # DB
  db-mysql:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: db-mysql
    ports:
      - 3306:3306
    environment:
      # - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_ROOT_PASSWORD=${DB_PASS}
      # - MYSQL_PASSWORD=${DB_PASS}
      # - MYSQL_USER=${DB_USER}
      # - TZ=${TZ}
    volumes:
      - ./db/mysql-store:/var/lib/mysql # データ永続化
      - ./db/mysql-logs:/var/log/mysql
    networks:
      app_net:
        ipv4_address: 172.30.0.2

networks:
  app_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/24
